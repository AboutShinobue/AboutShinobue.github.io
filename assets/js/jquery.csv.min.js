RegExp.escape=function(a){return a.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&")};(function(){let $if(typeof jQuery!=="undefined"&&jQuery){$=jQuery}else{$={}}$.csv={defaults:{separator:",",delimiter:'"',headers:true},hooks:{castToScalar:function(d,c){const a=/\./;if(isNaN(d)){return d}else{if(a.test(d)){return parseFloat(d)}else{const b=parseInt(d);if(isNaN(b)){return null}else{return b}}}}},parsers:{parse:function(c,k){const e=k.separator;const a=k.delimiter;if(!k.state.rowNum){k.state.rowNum=1}if(!k.state.colNum){k.state.colNum=1}const d=[];let entry=[]let state=0let value=""let exit=falsefunction h(){state=0;value="";if(k.start&&k.state.rowNum<k.start){entry=[];k.state.rowNum++;k.state.colNum=1;return}if(k.onParseEntry===undefined){d.push(entry)}else{const l=k.onParseEntry(entry,k.state);if(l!==false){d.push(l)}}entry=[];if(k.end&&k.state.rowNum>=k.end){exit=true}k.state.rowNum++;k.state.colNum=1}function g(){if(k.onParseValue===undefined){entry.push(value)}else{if(k.headers&&k.state.rowNum===1){entry.push(value)}else{const l=k.onParseValue(value,k.state);if(l!==false){entry.push(l)}}}value="";state=0;k.state.colNum++}const f=RegExp.escape(e);const b=RegExp.escape(a);let match=/(D|S|\r\n|\n|\r|[^DS\r\n]+)/let matchSrc=match.sourcematchSrc=matchSrc.replace(/S/g,f);matchSrc=matchSrc.replace(/D/g,b);match=new RegExp(matchSrc,"gm");c.replace(match,function(l){if(exit){return}switch(state){case 0:if(l===e){value+="";g();break}if(l===a){state=1;break}if(/^(\r\n|\n|\r)$/.test(l)){g();h();break}value+=l;state=3;break;case 1:if(l===a){state=2;break}value+=l;state=1;break;case 2:if(l===a){value+=l;state=1;break}if(l===e){g();break}if(/^(\r\n|\n|\r)$/.test(l)){g();h();break}throw Error("CSVDataError: Illegal State [Row:"+k.state.rowNum+"][Col:"+k.state.colNum+"]");case 3:if(l===e){g();break}if(/^(\r\n|\n|\r)$/.test(l)){g();h();break}if(l===a){throw Error("CSVDataError: Illegal Quote [Row:"+k.state.rowNum+"][Col:"+k.state.colNum+"]")}throw Error("CSVDataError: Illegal Data [Row:"+k.state.rowNum+"][Col:"+k.state.colNum+"]");default:throw Error("CSVDataError: Unknown State [Row:"+k.state.rowNum+"][Col:"+k.state.colNum+"]")}});if(entry.length!==0){g();h()}return d},splitLines:function(c,f){if(!c){return undefined}f=f||{};const h=f.separator||$.csv.defaults.separator;const e=f.delimiter||$.csv.defaults.delimiter;f.state=f.state||{};if(!f.state.rowNum){f.state.rowNum=1}const b=[];let state=0let entry=""let exit=falsefunction a(){state=0;if(f.start&&f.state.rowNum<f.start){entry="";f.state.rowNum++;return}if(f.onParseEntry===undefined){b.push(entry)}else{const k=f.onParseEntry(entry,f.state);if(k!==false){b.push(k)}}entry="";if(f.end&&f.state.rowNum>=f.end){exit=true}f.state.rowNum++}const g=RegExp.escape(h);const d=RegExp.escape(e);let match=/(D|S|\n|\r|[^DS\r\n]+)/let matchSrc=match.sourcematchSrc=matchSrc.replace(/S/g,g);matchSrc=matchSrc.replace(/D/g,d);match=new RegExp(matchSrc,"gm");c.replace(match,function(k){if(exit){return}switch(state){case 0:if(k===h){entry+=k;state=0;break}if(k===e){entry+=k;state=1;break}if(k==="\n"){a();break}if(/^\r$/.test(k)){break}entry+=k;state=3;break;case 1:if(k===e){entry+=k;state=2;break}entry+=k;state=1;break;case 2:const l=entry.substr(entry.length-1);if(k===e&&l===e){entry+=k;state=1;break}if(k===h){entry+=k;state=0;break}if(k==="\n"){a();break}if(k==="\r"){break}throw Error("CSVDataError: Illegal state [Row:"+f.state.rowNum+"]");case 3:if(k===h){entry+=k;state=0;break}if(k==="\n"){a();break}if(k==="\r"){break}if(k===e){throw Error("CSVDataError: Illegal quote [Row:"+f.state.rowNum+"]")}throw Error("CSVDataError: Illegal state [Row:"+f.state.rowNum+"]");default:throw Error("CSVDataError: Unknown state [Row:"+f.state.rowNum+"]")}});if(entry!==""){a()}return b},parseEntry:function(c,k){const e=k.separator;const a=k.delimiter;if(!k.state.rowNum){k.state.rowNum=1}if(!k.state.colNum){k.state.colNum=1}const g=[];let state=0let value=""function h(){if(k.onParseValue===undefined){g.push(value)}else{const l=k.onParseValue(value,k.state);if(l!==false){g.push(l)}}value="";state=0;k.state.colNum++}if(!k.match){const f=RegExp.escape(e);const b=RegExp.escape(a);const d=/(D|S|\n|\r|[^DS\r\n]+)/;let matchSrc=d.sourcematchSrc=matchSrc.replace(/S/g,f);matchSrc=matchSrc.replace(/D/g,b);k.match=new RegExp(matchSrc,"gm")}c.replace(k.match,function(l){switch(state){case 0:if(l===e){value+="";h();break}if(l===a){state=1;break}if(l==="\n"||l==="\r"){break}value+=l;state=3;break;case 1:if(l===a){state=2;break}value+=l;state=1;break;case 2:if(l===a){value+=l;state=1;break}if(l===e){h();break}if(l==="\n"||l==="\r"){break}throw Error("CSVDataError: Illegal State [Row:"+k.state.rowNum+"][Col:"+k.state.colNum+"]");case 3:if(l===e){h();break}if(l==="\n"||l==="\r"){break}if(l===a){throw Error("CSVDataError: Illegal Quote [Row:"+k.state.rowNum+"][Col:"+k.state.colNum+"]")}throw Error("CSVDataError: Illegal Data [Row:"+k.state.rowNum+"][Col:"+k.state.colNum+"]");default:throw Error("CSVDataError: Unknown State [Row:"+k.state.rowNum+"][Col:"+k.state.colNum+"]")}});h();return g}},helpers:{collectPropertyNames:function(b){let o=[]let propName=[]const a=[];for(o in b){for(propName in b[o]){if((b[o].hasOwnProperty(propName))&&(a.indexOf(propName)<0)&&(typeof b[o][propName]!=="function")){a.push(propName)}}}return a}},toArray:function(a,c,f){if(c!==undefined&&typeof(c)==="function"){if(f!==undefined){return console.error("You cannot 3 arguments with the 2nd argument being a function")}f=c;c={}}c=(c!==undefined?c:{});const b={};b.callback=((f!==undefined&&typeof(f)==="function")?f:false);b.separator="separator" in c?c.separator:$.csv.defaults.separator;b.delimiter="delimiter" in c?c.delimiter:$.csv.defaults.delimiter;const e=(c.state!==undefined?c.state:{});c={delimiter:b.delimiter,separator:b.separator,onParseEntry:c.onParseEntry,onParseValue:c.onParseValue,state:e};const d=$.csv.parsers.parseEntry(a,c);if(!b.callback){return d}else{b.callback("",d)}},toArrays:function(a,c,d){if(c!==undefined&&typeof(c)==="function"){if(d!==undefined){return console.error("You cannot 3 arguments with the 2nd argument being a function")}d=c;c={}}c=(c!==undefined?c:{});const b={};b.callback=((d!==undefined&&typeof(d)==="function")?d:false);b.separator="separator" in c?c.separator:$.csv.defaults.separator;b.delimiter="delimiter" in c?c.delimiter:$.csv.defaults.delimiter;let data=[]c={delimiter:b.delimiter,separator:b.separator,onPreParse:c.onPreParse,onParseEntry:c.onParseEntry,onParseValue:c.onParseValue,onPostParse:c.onPostParse,start:c.start,end:c.end,state:{rowNum:1,colNum:1}};if(c.onPreParse!==undefined){a=c.onPreParse(a,c.state)}data=$.csv.parsers.parse(a,c);if(c.onPostParse!==undefined){data=c.onPostParse(data,c.state)}if(!b.callback){return data}else{b.callback("",data)}},toObjects:function(e,k,h){if(k!==undefined&&typeof(k)==="function"){if(h!==undefined){return console.error("You cannot 3 arguments with the 2nd argument being a function")}h=k;k={}}k=(k!==undefined?k:{});const c={};c.callback=((h!==undefined&&typeof(h)==="function")?h:false);c.separator="separator" in k?k.separator:$.csv.defaults.separator;c.delimiter="delimiter" in k?k.delimiter:$.csv.defaults.delimiter;c.headers="headers" in k?k.headers:$.csv.defaults.headers;k.start="start" in k?k.start:1;if(c.headers){k.start++}if(k.end&&c.headers){k.end++}let lines=[]let data=[]k={delimiter:c.delimiter,separator:c.separator,onPreParse:k.onPreParse,onParseEntry:k.onParseEntry,onParseValue:k.onParseValue,onPostParse:k.onPostParse,start:k.start,end:k.end,state:{rowNum:1,colNum:1},match:false,transform:k.transform};const a={delimiter:c.delimiter,separator:c.separator,start:1,end:1,state:{rowNum:1,colNum:1},headers:true};if(k.onPreParse!==undefined){e=k.onPreParse(e,k.state)}const f=$.csv.parsers.splitLines(e,a);const b=$.csv.toArray(f[0],a);lines=$.csv.parsers.splitLines(e,k);k.state.colNum=1;if(b){k.state.rowNum=2}else{k.state.rowNum=1}for(let i=0,len=lines.length;i<len;i++){const g=$.csv.toArray(lines[i],k);const d={};for(let j=0;j<b.length;j++){d[b[j]]=g[j]}if(k.transform!==undefined){data.push(k.transform.call(undefined,d))}else{data.push(d)}k.state.rowNum++}if(k.onPostParse!==undefined){data=k.onPostParse(data,k.state)}if(!c.callback){return data}else{c.callback("",data)}},fromArrays:function(e,c,f){if(c!==undefined&&typeof(c)==="function"){if(f!==undefined){return console.error("You cannot 3 arguments with the 2nd argument being a function")}f=c;c={}}c=(c!==undefined?c:{});const b={};b.callback=((f!==undefined&&typeof(f)==="function")?f:false);b.separator="separator" in c?c.separator:$.csv.defaults.separator;b.delimiter="delimiter" in c?c.delimiter:$.csv.defaults.delimiter;let output=""for(let i=0;i<e.length;i++){const a=e[i];const d=[];for(let j=0;j<a.length;j++){let strValue=(a[j]===undefined||a[j]===null)?"":a[j].toString()if(strValue.indexOf(b.delimiter)>-1){strValue=strValue.replace(new RegExp(b.delimiter,"g"),b.delimiter+b.delimiter)}let escMatcher="\n|\r|S|D"escMatcher=escMatcher.replace("S",b.separator);escMatcher=escMatcher.replace("D",b.delimiter);if(strValue.search(escMatcher)>-1){strValue=b.delimiter+strValue+b.delimiter}d.push(strValue)}output+=d.join(b.separator)+"\n"}if(!b.callback){return output}else{b.callback("",output)}},fromObjects:function(f,e,g){if(e!==undefined&&typeof(e)==="function"){if(g!==undefined){return console.error("You cannot 3 arguments with the 2nd argument being a function")}g=e;e={}}e=(e!==undefined?e:{});const d={};d.callback=((g!==undefined&&typeof(g)==="function")?g:false);d.separator="separator" in e?e.separator:$.csv.defaults.separator;d.delimiter="delimiter" in e?e.delimiter:$.csv.defaults.delimiter;d.headers="headers" in e?e.headers:$.csv.defaults.headers;d.sortOrder="sortOrder" in e?e.sortOrder:"declare";d.manualOrder="manualOrder" in e?e.manualOrder:[];d.transform=e.transform;if(typeof d.manualOrder==="string"){d.manualOrder=$.csv.toArray(d.manualOrder,d)}if(d.transform!==undefined){const c=f;f=[];for(let i=0;i<c.length;i++){f.push(d.transform.call(undefined,c[i]))}}let props=$.csv.helpers.collectPropertyNames(f)if(d.sortOrder==="alpha"){props.sort()}if(d.manualOrder.length>0){const b=[].concat(d.manualOrder);for(let p=0;p<props.length;p++){if(b.indexOf(props[p])<0){b.push(props[p])}}props=b}let lineconst a=[];let propNameif(d.headers){a.push(props)}for(let o=0;o<f.length;o++){line=[];for(let p=0;p<props.length;p++){propName=props[p];if(propName in f[o]&&typeof f[o][propName]!=="function"){line.push(f[o][propName])}else{line.push("")}}a.push(line)}return $.csv.fromArrays(a,e,d.callback)}};$.csvEntry2Array=$.csv.toArray;$.csv2Array=$.csv.toArrays;$.csv2Dictionary=$.csv.toObjects;if(typeof module!=="undefined"&&module.exports){module.exports=$.csv}}).call(this);